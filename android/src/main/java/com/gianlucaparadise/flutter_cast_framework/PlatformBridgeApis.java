// Autogenerated from Pigeon (v1.0.8), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.gianlucaparadise.flutter_cast_framework;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class PlatformBridgeApis {

  public enum StreamType {
    invalid(0),
    none(1),
    buffered(2),
    live(3);

    private int index;
    private StreamType(final int index) {
      this.index = index;
    }
  }

  public enum MediaType {
    generic(0),
    movie(1),
    tvShow(2),
    musicTrack(3),
    photo(4),
    audiobookChapter(5),
    user(6);

    private int index;
    private MediaType(final int index) {
      this.index = index;
    }
  }

  public enum TrackType {
    unknown(0),
    text(1),
    audio(2),
    video(3);

    private int index;
    private TrackType(final int index) {
      this.index = index;
    }
  }

  public enum TrackSubtype {
    unknown(0),
    none(1),
    subtitles(2),
    captions(3),
    descriptions(4),
    chapters(5),
    metadata(6);

    private int index;
    private TrackSubtype(final int index) {
      this.index = index;
    }
  }

  public enum PlayerState {
    unknown(0),
    idle(1),
    playing(2),
    paused(3),
    buffering(4),
    loading(5);

    private int index;
    private PlayerState(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaLoadRequestData {
    private Boolean shouldAutoplay;
    public Boolean getShouldAutoplay() { return shouldAutoplay; }
    public void setShouldAutoplay(Boolean setterArg) { this.shouldAutoplay = setterArg; }

    private Long currentTime;
    public Long getCurrentTime() { return currentTime; }
    public void setCurrentTime(Long setterArg) { this.currentTime = setterArg; }

    private MediaInfo mediaInfo;
    public MediaInfo getMediaInfo() { return mediaInfo; }
    public void setMediaInfo(MediaInfo setterArg) { this.mediaInfo = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("shouldAutoplay", shouldAutoplay);
      toMapResult.put("currentTime", currentTime);
      toMapResult.put("mediaInfo", (mediaInfo == null) ? null : mediaInfo.toMap());
      return toMapResult;
    }
    static MediaLoadRequestData fromMap(Map<String, Object> map) {
      MediaLoadRequestData fromMapResult = new MediaLoadRequestData();
      Object shouldAutoplay = map.get("shouldAutoplay");
      fromMapResult.shouldAutoplay = (Boolean)shouldAutoplay;
      Object currentTime = map.get("currentTime");
      fromMapResult.currentTime = (currentTime == null) ? null : ((currentTime instanceof Integer) ? (Integer)currentTime : (Long)currentTime);
      Object mediaInfo = map.get("mediaInfo");
      fromMapResult.mediaInfo = MediaInfo.fromMap((Map)mediaInfo);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaInfo {
    private String contentId;
    public String getContentId() { return contentId; }
    public void setContentId(String setterArg) { this.contentId = setterArg; }

    private StreamType streamType;
    public StreamType getStreamType() { return streamType; }
    public void setStreamType(StreamType setterArg) { this.streamType = setterArg; }

    private String contentType;
    public String getContentType() { return contentType; }
    public void setContentType(String setterArg) { this.contentType = setterArg; }

    private MediaMetadata mediaMetadata;
    public MediaMetadata getMediaMetadata() { return mediaMetadata; }
    public void setMediaMetadata(MediaMetadata setterArg) { this.mediaMetadata = setterArg; }

    private List<MediaTrack> mediaTracks;
    public List<MediaTrack> getMediaTracks() { return mediaTracks; }
    public void setMediaTracks(List<MediaTrack> setterArg) { this.mediaTracks = setterArg; }

    private Long streamDuration;
    public Long getStreamDuration() { return streamDuration; }
    public void setStreamDuration(Long setterArg) { this.streamDuration = setterArg; }

    private String customDataAsJson;
    public String getCustomDataAsJson() { return customDataAsJson; }
    public void setCustomDataAsJson(String setterArg) { this.customDataAsJson = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("contentId", contentId);
      toMapResult.put("streamType", streamType.index);
      toMapResult.put("contentType", contentType);
      toMapResult.put("mediaMetadata", (mediaMetadata == null) ? null : mediaMetadata.toMap());
      toMapResult.put("mediaTracks", mediaTracks);
      toMapResult.put("streamDuration", streamDuration);
      toMapResult.put("customDataAsJson", customDataAsJson);
      return toMapResult;
    }
    static MediaInfo fromMap(Map<String, Object> map) {
      MediaInfo fromMapResult = new MediaInfo();
      Object contentId = map.get("contentId");
      fromMapResult.contentId = (String)contentId;
      Object streamType = map.get("streamType");
      fromMapResult.streamType = StreamType.values()[(int)streamType];
      Object contentType = map.get("contentType");
      fromMapResult.contentType = (String)contentType;
      Object mediaMetadata = map.get("mediaMetadata");
      fromMapResult.mediaMetadata = MediaMetadata.fromMap((Map)mediaMetadata);
      Object mediaTracks = map.get("mediaTracks");
      fromMapResult.mediaTracks = (List<MediaTrack>)mediaTracks;
      Object streamDuration = map.get("streamDuration");
      fromMapResult.streamDuration = (streamDuration == null) ? null : ((streamDuration instanceof Integer) ? (Integer)streamDuration : (Long)streamDuration);
      Object customDataAsJson = map.get("customDataAsJson");
      fromMapResult.customDataAsJson = (String)customDataAsJson;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaMetadata {
    private MediaType mediaType;
    public MediaType getMediaType() { return mediaType; }
    public void setMediaType(MediaType setterArg) { this.mediaType = setterArg; }

    private List<WebImage> webImages;
    public List<WebImage> getWebImages() { return webImages; }
    public void setWebImages(List<WebImage> setterArg) { this.webImages = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("mediaType", mediaType.index);
      toMapResult.put("webImages", webImages);
      return toMapResult;
    }
    static MediaMetadata fromMap(Map<String, Object> map) {
      MediaMetadata fromMapResult = new MediaMetadata();
      Object mediaType = map.get("mediaType");
      fromMapResult.mediaType = MediaType.values()[(int)mediaType];
      Object webImages = map.get("webImages");
      fromMapResult.webImages = (List<WebImage>)webImages;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class WebImage {
    private String url;
    public String getUrl() { return url; }
    public void setUrl(String setterArg) { this.url = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("url", url);
      return toMapResult;
    }
    static WebImage fromMap(Map<String, Object> map) {
      WebImage fromMapResult = new WebImage();
      Object url = map.get("url");
      fromMapResult.url = (String)url;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaTrack {
    private Long id;
    public Long getId() { return id; }
    public void setId(Long setterArg) { this.id = setterArg; }

    private TrackType trackType;
    public TrackType getTrackType() { return trackType; }
    public void setTrackType(TrackType setterArg) { this.trackType = setterArg; }

    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private TrackSubtype trackSubtype;
    public TrackSubtype getTrackSubtype() { return trackSubtype; }
    public void setTrackSubtype(TrackSubtype setterArg) { this.trackSubtype = setterArg; }

    private String contentId;
    public String getContentId() { return contentId; }
    public void setContentId(String setterArg) { this.contentId = setterArg; }

    private String language;
    public String getLanguage() { return language; }
    public void setLanguage(String setterArg) { this.language = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("trackType", trackType.index);
      toMapResult.put("name", name);
      toMapResult.put("trackSubtype", trackSubtype.index);
      toMapResult.put("contentId", contentId);
      toMapResult.put("language", language);
      return toMapResult;
    }
    static MediaTrack fromMap(Map<String, Object> map) {
      MediaTrack fromMapResult = new MediaTrack();
      Object id = map.get("id");
      fromMapResult.id = (id == null) ? null : ((id instanceof Integer) ? (Integer)id : (Long)id);
      Object trackType = map.get("trackType");
      fromMapResult.trackType = TrackType.values()[(int)trackType];
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object trackSubtype = map.get("trackSubtype");
      fromMapResult.trackSubtype = TrackSubtype.values()[(int)trackSubtype];
      Object contentId = map.get("contentId");
      fromMapResult.contentId = (String)contentId;
      Object language = map.get("language");
      fromMapResult.language = (String)language;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaStatus {
    private PlayerState playerState;
    public PlayerState getPlayerState() { return playerState; }
    public void setPlayerState(PlayerState setterArg) { this.playerState = setterArg; }

    private Boolean isPlayingAd;
    public Boolean getIsPlayingAd() { return isPlayingAd; }
    public void setIsPlayingAd(Boolean setterArg) { this.isPlayingAd = setterArg; }

    private MediaInfo mediaInfo;
    public MediaInfo getMediaInfo() { return mediaInfo; }
    public void setMediaInfo(MediaInfo setterArg) { this.mediaInfo = setterArg; }

    private AdBreakStatus adBreakStatus;
    public AdBreakStatus getAdBreakStatus() { return adBreakStatus; }
    public void setAdBreakStatus(AdBreakStatus setterArg) { this.adBreakStatus = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("playerState", playerState.index);
      toMapResult.put("isPlayingAd", isPlayingAd);
      toMapResult.put("mediaInfo", (mediaInfo == null) ? null : mediaInfo.toMap());
      toMapResult.put("adBreakStatus", (adBreakStatus == null) ? null : adBreakStatus.toMap());
      return toMapResult;
    }
    static MediaStatus fromMap(Map<String, Object> map) {
      MediaStatus fromMapResult = new MediaStatus();
      Object playerState = map.get("playerState");
      fromMapResult.playerState = PlayerState.values()[(int)playerState];
      Object isPlayingAd = map.get("isPlayingAd");
      fromMapResult.isPlayingAd = (Boolean)isPlayingAd;
      Object mediaInfo = map.get("mediaInfo");
      fromMapResult.mediaInfo = MediaInfo.fromMap((Map)mediaInfo);
      Object adBreakStatus = map.get("adBreakStatus");
      fromMapResult.adBreakStatus = AdBreakStatus.fromMap((Map)adBreakStatus);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AdBreakStatus {
    private String adBreakId;
    public String getAdBreakId() { return adBreakId; }
    public void setAdBreakId(String setterArg) { this.adBreakId = setterArg; }

    private String adBreakClipId;
    public String getAdBreakClipId() { return adBreakClipId; }
    public void setAdBreakClipId(String setterArg) { this.adBreakClipId = setterArg; }

    private Long whenSkippableMs;
    public Long getWhenSkippableMs() { return whenSkippableMs; }
    public void setWhenSkippableMs(Long setterArg) { this.whenSkippableMs = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("adBreakId", adBreakId);
      toMapResult.put("adBreakClipId", adBreakClipId);
      toMapResult.put("whenSkippableMs", whenSkippableMs);
      return toMapResult;
    }
    static AdBreakStatus fromMap(Map<String, Object> map) {
      AdBreakStatus fromMapResult = new AdBreakStatus();
      Object adBreakId = map.get("adBreakId");
      fromMapResult.adBreakId = (String)adBreakId;
      Object adBreakClipId = map.get("adBreakClipId");
      fromMapResult.adBreakClipId = (String)adBreakClipId;
      Object whenSkippableMs = map.get("whenSkippableMs");
      fromMapResult.whenSkippableMs = (whenSkippableMs == null) ? null : ((whenSkippableMs instanceof Integer) ? (Integer)whenSkippableMs : (Long)whenSkippableMs);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CastDevice {
    private String deviceId;
    public String getDeviceId() { return deviceId; }
    public void setDeviceId(String setterArg) { this.deviceId = setterArg; }

    private String friendlyName;
    public String getFriendlyName() { return friendlyName; }
    public void setFriendlyName(String setterArg) { this.friendlyName = setterArg; }

    private String modelName;
    public String getModelName() { return modelName; }
    public void setModelName(String setterArg) { this.modelName = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("deviceId", deviceId);
      toMapResult.put("friendlyName", friendlyName);
      toMapResult.put("modelName", modelName);
      return toMapResult;
    }
    static CastDevice fromMap(Map<String, Object> map) {
      CastDevice fromMapResult = new CastDevice();
      Object deviceId = map.get("deviceId");
      fromMapResult.deviceId = (String)deviceId;
      Object friendlyName = map.get("friendlyName");
      fromMapResult.friendlyName = (String)friendlyName;
      Object modelName = map.get("modelName");
      fromMapResult.modelName = (String)modelName;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CastMessage {
    private String namespace;
    public String getNamespace() { return namespace; }
    public void setNamespace(String setterArg) { this.namespace = setterArg; }

    private String message;
    public String getMessage() { return message; }
    public void setMessage(String setterArg) { this.message = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("namespace", namespace);
      toMapResult.put("message", message);
      return toMapResult;
    }
    static CastMessage fromMap(Map<String, Object> map) {
      CastMessage fromMapResult = new CastMessage();
      Object namespace = map.get("namespace");
      fromMapResult.namespace = (String)namespace;
      Object message = map.get("message");
      fromMapResult.message = (String)message;
      return fromMapResult;
    }
  }
  private static class CastHostApiCodec extends StandardMessageCodec {
    public static final CastHostApiCodec INSTANCE = new CastHostApiCodec();
    private CastHostApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CastDevice.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return CastMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return MediaInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return MediaLoadRequestData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return MediaMetadata.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return MediaTrack.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return WebImage.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CastDevice) {
        stream.write(128);
        writeValue(stream, ((CastDevice) value).toMap());
      } else 
      if (value instanceof CastMessage) {
        stream.write(129);
        writeValue(stream, ((CastMessage) value).toMap());
      } else 
      if (value instanceof MediaInfo) {
        stream.write(130);
        writeValue(stream, ((MediaInfo) value).toMap());
      } else 
      if (value instanceof MediaLoadRequestData) {
        stream.write(131);
        writeValue(stream, ((MediaLoadRequestData) value).toMap());
      } else 
      if (value instanceof MediaMetadata) {
        stream.write(132);
        writeValue(stream, ((MediaMetadata) value).toMap());
      } else 
      if (value instanceof MediaTrack) {
        stream.write(133);
        writeValue(stream, ((MediaTrack) value).toMap());
      } else 
      if (value instanceof WebImage) {
        stream.write(134);
        writeValue(stream, ((WebImage) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface CastHostApi {
    void sendMessage(CastMessage message);
    void showCastDialog();
    void setMute(Boolean muted);
    CastDevice getCastDevice();
    void loadMediaLoadRequestData(MediaLoadRequestData request);
    MediaInfo getMediaInfo();
    void play();
    void pause();
    void stop();
    void showTracksChooserDialog();

    /** The codec used by CastHostApi. */
    static MessageCodec<Object> getCodec() {
      return CastHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `CastHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, CastHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.sendMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CastMessage messageArg = (CastMessage)args.get(0);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              api.sendMessage(messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.showCastDialog", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.showCastDialog();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.setMute", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean mutedArg = (Boolean)args.get(0);
              if (mutedArg == null) {
                throw new NullPointerException("mutedArg unexpectedly null.");
              }
              api.setMute(mutedArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.getCastDevice", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              CastDevice output = api.getCastDevice();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.loadMediaLoadRequestData", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              MediaLoadRequestData requestArg = (MediaLoadRequestData)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.loadMediaLoadRequestData(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.getMediaInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              MediaInfo output = api.getMediaInfo();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.play", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.play();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.pause", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.pause();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.stop", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.stop();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastHostApi.showTracksChooserDialog", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.showTracksChooserDialog();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class CastFlutterApiCodec extends StandardMessageCodec {
    public static final CastFlutterApiCodec INSTANCE = new CastFlutterApiCodec();
    private CastFlutterApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AdBreakStatus.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return CastMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return MediaInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return MediaMetadata.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return MediaStatus.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return MediaTrack.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return WebImage.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AdBreakStatus) {
        stream.write(128);
        writeValue(stream, ((AdBreakStatus) value).toMap());
      } else 
      if (value instanceof CastMessage) {
        stream.write(129);
        writeValue(stream, ((CastMessage) value).toMap());
      } else 
      if (value instanceof MediaInfo) {
        stream.write(130);
        writeValue(stream, ((MediaInfo) value).toMap());
      } else 
      if (value instanceof MediaMetadata) {
        stream.write(131);
        writeValue(stream, ((MediaMetadata) value).toMap());
      } else 
      if (value instanceof MediaStatus) {
        stream.write(132);
        writeValue(stream, ((MediaStatus) value).toMap());
      } else 
      if (value instanceof MediaTrack) {
        stream.write(133);
        writeValue(stream, ((MediaTrack) value).toMap());
      } else 
      if (value instanceof WebImage) {
        stream.write(134);
        writeValue(stream, ((WebImage) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class CastFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public CastFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return CastFlutterApiCodec.INSTANCE;
    }

    public void getSessionMessageNamespaces(Reply<List<String>> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.getSessionMessageNamespaces", getCodec());
      channel.send(null, channelReply -> {
        @SuppressWarnings("ConstantConditions")
        List<String> output = (List<String>)channelReply;
        callback.reply(output);
      });
    }
    public void onCastStateChanged(Long castStateArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onCastStateChanged", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(castStateArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onMessageReceived(CastMessage messageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onMessageReceived", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(messageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionStarting(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionStarting", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionStarted(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionStarted", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionStartFailed(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionStartFailed", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionEnding(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionEnding", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionEnded(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionEnded", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionResuming(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionResuming", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionResumed(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionResumed", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionResumeFailed(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionResumeFailed", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionSuspended(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionSuspended", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onStatusUpdated(MediaStatus mediaStatusArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onStatusUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(mediaStatusArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onMetadataUpdated(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onMetadataUpdated", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onQueueStatusUpdated(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onQueueStatusUpdated", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onPreloadStatusUpdated(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onPreloadStatusUpdated", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSendingRemoteMediaRequest(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSendingRemoteMediaRequest", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onAdBreakStatusUpdated(MediaStatus mediaStatusArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onAdBreakStatusUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(mediaStatusArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onMediaError(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onMediaError", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onProgressUpdated(Long progressMsArg, Long durationMsArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onProgressUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(progressMsArg, durationMsArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onAdBreakClipProgressUpdated(String adBreakIdArg, String adBreakClipIdArg, Long progressMsArg, Long durationMsArg, Long whenSkippableMsArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onAdBreakClipProgressUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(adBreakIdArg, adBreakClipIdArg, progressMsArg, durationMsArg, whenSkippableMsArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}

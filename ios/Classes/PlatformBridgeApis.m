// Autogenerated from Pigeon (v1.0.8), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "PlatformBridgeApis.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface MediaLoadRequestData ()
+ (MediaLoadRequestData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface MediaInfo ()
+ (MediaInfo *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface MediaMetadata ()
+ (MediaMetadata *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface WebImage ()
+ (WebImage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface MediaTrack ()
+ (MediaTrack *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface CastMessage ()
+ (CastMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation MediaLoadRequestData
+ (MediaLoadRequestData *)fromMap:(NSDictionary *)dict {
  MediaLoadRequestData *result = [[MediaLoadRequestData alloc] init];
  result.shouldAutoplay = dict[@"shouldAutoplay"];
  if ((NSNull *)result.shouldAutoplay == [NSNull null]) {
    result.shouldAutoplay = nil;
  }
  result.currentTime = dict[@"currentTime"];
  if ((NSNull *)result.currentTime == [NSNull null]) {
    result.currentTime = nil;
  }
  result.mediaInfo = [MediaInfo fromMap:dict[@"mediaInfo"]];
  if ((NSNull *)result.mediaInfo == [NSNull null]) {
    result.mediaInfo = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.shouldAutoplay ? self.shouldAutoplay : [NSNull null]), @"shouldAutoplay", (self.currentTime ? self.currentTime : [NSNull null]), @"currentTime", (self.mediaInfo ? [self.mediaInfo toMap] : [NSNull null]), @"mediaInfo", nil];
}
@end

@implementation MediaInfo
+ (MediaInfo *)fromMap:(NSDictionary *)dict {
  MediaInfo *result = [[MediaInfo alloc] init];
  result.contentId = dict[@"contentId"];
  if ((NSNull *)result.contentId == [NSNull null]) {
    result.contentId = nil;
  }
  result.streamType = [dict[@"streamType"] integerValue];
  result.contentType = dict[@"contentType"];
  if ((NSNull *)result.contentType == [NSNull null]) {
    result.contentType = nil;
  }
  result.mediaMetadata = [MediaMetadata fromMap:dict[@"mediaMetadata"]];
  if ((NSNull *)result.mediaMetadata == [NSNull null]) {
    result.mediaMetadata = nil;
  }
  result.mediaTracks = dict[@"mediaTracks"];
  if ((NSNull *)result.mediaTracks == [NSNull null]) {
    result.mediaTracks = nil;
  }
  result.streamDuration = dict[@"streamDuration"];
  if ((NSNull *)result.streamDuration == [NSNull null]) {
    result.streamDuration = nil;
  }
  result.customDataAsJson = dict[@"customDataAsJson"];
  if ((NSNull *)result.customDataAsJson == [NSNull null]) {
    result.customDataAsJson = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.contentId ? self.contentId : [NSNull null]), @"contentId", @(self.streamType), @"streamType", (self.contentType ? self.contentType : [NSNull null]), @"contentType", (self.mediaMetadata ? [self.mediaMetadata toMap] : [NSNull null]), @"mediaMetadata", (self.mediaTracks ? self.mediaTracks : [NSNull null]), @"mediaTracks", (self.streamDuration ? self.streamDuration : [NSNull null]), @"streamDuration", (self.customDataAsJson ? self.customDataAsJson : [NSNull null]), @"customDataAsJson", nil];
}
@end

@implementation MediaMetadata
+ (MediaMetadata *)fromMap:(NSDictionary *)dict {
  MediaMetadata *result = [[MediaMetadata alloc] init];
  result.mediaType = [dict[@"mediaType"] integerValue];
  result.strings = dict[@"strings"];
  if ((NSNull *)result.strings == [NSNull null]) {
    result.strings = nil;
  }
  result.webImages = dict[@"webImages"];
  if ((NSNull *)result.webImages == [NSNull null]) {
    result.webImages = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:@(self.mediaType), @"mediaType", (self.strings ? self.strings : [NSNull null]), @"strings", (self.webImages ? self.webImages : [NSNull null]), @"webImages", nil];
}
@end

@implementation WebImage
+ (WebImage *)fromMap:(NSDictionary *)dict {
  WebImage *result = [[WebImage alloc] init];
  result.url = dict[@"url"];
  if ((NSNull *)result.url == [NSNull null]) {
    result.url = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.url ? self.url : [NSNull null]), @"url", nil];
}
@end

@implementation MediaTrack
+ (MediaTrack *)fromMap:(NSDictionary *)dict {
  MediaTrack *result = [[MediaTrack alloc] init];
  result.id = dict[@"id"];
  if ((NSNull *)result.id == [NSNull null]) {
    result.id = nil;
  }
  result.trackType = [dict[@"trackType"] integerValue];
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.trackSubtype = [dict[@"trackSubtype"] integerValue];
  result.contentId = dict[@"contentId"];
  if ((NSNull *)result.contentId == [NSNull null]) {
    result.contentId = nil;
  }
  result.language = dict[@"language"];
  if ((NSNull *)result.language == [NSNull null]) {
    result.language = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id", @(self.trackType), @"trackType", (self.name ? self.name : [NSNull null]), @"name", @(self.trackSubtype), @"trackSubtype", (self.contentId ? self.contentId : [NSNull null]), @"contentId", (self.language ? self.language : [NSNull null]), @"language", nil];
}
@end

@implementation CastMessage
+ (CastMessage *)fromMap:(NSDictionary *)dict {
  CastMessage *result = [[CastMessage alloc] init];
  result.namespace = dict[@"namespace"];
  if ((NSNull *)result.namespace == [NSNull null]) {
    result.namespace = nil;
  }
  result.message = dict[@"message"];
  if ((NSNull *)result.message == [NSNull null]) {
    result.message = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.namespace ? self.namespace : [NSNull null]), @"namespace", (self.message ? self.message : [NSNull null]), @"message", nil];
}
@end

@interface CastHostApiCodecReader : FlutterStandardReader
@end
@implementation CastHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [CastMessage fromMap:[self readValue]];
    
    case 129:     
      return [MediaInfo fromMap:[self readValue]];
    
    case 130:     
      return [MediaLoadRequestData fromMap:[self readValue]];
    
    case 131:     
      return [MediaMetadata fromMap:[self readValue]];
    
    case 132:     
      return [MediaTrack fromMap:[self readValue]];
    
    case 133:     
      return [WebImage fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface CastHostApiCodecWriter : FlutterStandardWriter
@end
@implementation CastHostApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[CastMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[MediaInfo class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[MediaLoadRequestData class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[MediaMetadata class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[MediaTrack class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[WebImage class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface CastHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation CastHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[CastHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[CastHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *CastHostApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    CastHostApiCodecReaderWriter *readerWriter = [[CastHostApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void CastHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CastHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.CastHostApi.sendMessage"
        binaryMessenger:binaryMessenger
        codec:CastHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendMessageMessage:error:)], @"CastHostApi api (%@) doesn't respond to @selector(sendMessageMessage:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        CastMessage *arg_message = args[0];
        FlutterError *error;
        [api sendMessageMessage:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.CastHostApi.showCastDialog"
        binaryMessenger:binaryMessenger
        codec:CastHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showCastDialogWithError:)], @"CastHostApi api (%@) doesn't respond to @selector(showCastDialogWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api showCastDialogWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.CastHostApi.loadMediaLoadRequestData"
        binaryMessenger:binaryMessenger
        codec:CastHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(loadMediaLoadRequestDataRequest:error:)], @"CastHostApi api (%@) doesn't respond to @selector(loadMediaLoadRequestDataRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        MediaLoadRequestData *arg_request = args[0];
        FlutterError *error;
        [api loadMediaLoadRequestDataRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface CastFlutterApiCodecReader : FlutterStandardReader
@end
@implementation CastFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [CastMessage fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface CastFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation CastFlutterApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[CastMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface CastFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation CastFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[CastFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[CastFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *CastFlutterApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    CastFlutterApiCodecReaderWriter *readerWriter = [[CastFlutterApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


@interface CastFlutterApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation CastFlutterApi
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)getSessionMessageNamespacesWithCompletion:(void(^)(NSArray<NSString *> *, NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CastFlutterApi.getSessionMessageNamespaces"
      binaryMessenger:self.binaryMessenger
      codec:CastFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    NSArray<NSString *> *output = reply;
    completion(output, nil);
  }];
}
- (void)onCastStateChangedCastState:(NSNumber *)arg_castState completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CastFlutterApi.onCastStateChanged"
      binaryMessenger:self.binaryMessenger
      codec:CastFlutterApiGetCodec()];
  [channel sendMessage:@[arg_castState] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onMessageReceivedMessage:(CastMessage *)arg_message completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CastFlutterApi.onMessageReceived"
      binaryMessenger:self.binaryMessenger
      codec:CastFlutterApiGetCodec()];
  [channel sendMessage:@[arg_message] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onSessionStartingWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CastFlutterApi.onSessionStarting"
      binaryMessenger:self.binaryMessenger
      codec:CastFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onSessionStartedWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CastFlutterApi.onSessionStarted"
      binaryMessenger:self.binaryMessenger
      codec:CastFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onSessionStartFailedWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CastFlutterApi.onSessionStartFailed"
      binaryMessenger:self.binaryMessenger
      codec:CastFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onSessionEndingWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CastFlutterApi.onSessionEnding"
      binaryMessenger:self.binaryMessenger
      codec:CastFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onSessionEndedWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CastFlutterApi.onSessionEnded"
      binaryMessenger:self.binaryMessenger
      codec:CastFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onSessionResumingWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CastFlutterApi.onSessionResuming"
      binaryMessenger:self.binaryMessenger
      codec:CastFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onSessionResumedWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CastFlutterApi.onSessionResumed"
      binaryMessenger:self.binaryMessenger
      codec:CastFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onSessionResumeFailedWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CastFlutterApi.onSessionResumeFailed"
      binaryMessenger:self.binaryMessenger
      codec:CastFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onSessionSuspendedWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CastFlutterApi.onSessionSuspended"
      binaryMessenger:self.binaryMessenger
      codec:CastFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
@end
